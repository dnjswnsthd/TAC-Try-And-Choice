<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.service.tac.model.mapper.AnalyseMapper">

	<!-- 대분류 별 통계 합계 -->
	<resultMap type="ConsumeAnalysis_LargeSum" id="AnalysisLargeSum">
		<result column="LCNAME" property="LCname" />
		<result column="COUNT" property="count" />
		<result column="SUM" property="sum" />
		<result column="IMAGE" property="Image" />
	</resultMap>

	<!-- 아이디별 전체 소비 분석 결과 가지고 오기 -->
	<resultMap type="ConsumeAnalysis_Desc" id="AnalysisDesc">
		<result column="LCNAME" property="LCName" />
		<result column="SCNAME" property="SCName" />
		<result column="PRICE" property="price" />
		<result column="DATE" property="date" />
	</resultMap>
	
	<!-- 아이디별 전체 소비 분석 결과 가지고 오기 -->
	<resultMap type="ConsumeAnalysis_ByDate" id="AnalysisDate">
		<result column="DATE" property="date" />
		<result column="MONEY" property="money" />
	</resultMap>
	
	<!-- 아이디별 전체 소비 분석 결과 가지고 오기 -->
	<resultMap type="ConsumeAnalysis_ByDay" id="AnalysisDay">
		<result column="DAY" property="day" />
		<result column="SUM" property="money" />
	</resultMap>
	
	<!-- SQL -->
	
	<!-- 아이디의 나이 가지고 오기 -->
	<select id="MyAge" parameterType="string" resultType="int">
		SELECT m.AGE 
		FROM MEMBER m
		WHERE m.MEMBER_ID = #{VALUE}
	</select>
	
	<!-- 대분류 별 통계 합계 -->
	<select id="AnalyseLC_SUM" parameterType="string" resultMap="AnalysisLargeSum">
		SELECT lc.LARGE_CATEGORY_NAME "LCNAME", COUNT(*) "COUNT", NVL(SUM(c.CONSUME_PRICE),0) "SUM",
			 (SELECT lc2.LARGE_CATEGORY_IMAGE FROM LARGE_CATEGORY lc2 WHERE lc2.LARGE_CATEGORY_NAME = lc.LARGE_CATEGORY_NAME) "IMAGE"
		FROM CONSUME c RIGHT JOIN LARGE_CATEGORY lc ON (lc.LARGE_CATEGORY_ID = c.LARGE_CATEGORY_ID)
		AND MEMBER_ID = #{VALUE}
		GROUP BY lc.LARGE_CATEGORY_NAME
	</select>
	
	<!-- 대분류 별 통계 합계 // 나이대 평균 -->
	<select id="AnalyseLC_SUM_AVG" parameterType="int" resultMap="AnalysisLargeSum">
		SELECT lc.LARGE_CATEGORY_NAME "LCNAME", 
				CEIL(COUNT(*)/(SELECT COUNT(m.MEMBER_ID) FROM MEMBER m WHERE #{VALUE} <![CDATA[<=]]> m.AGE AND m.AGE <![CDATA[<=]]> #{VALUE}+9 )) "COUNT", 
				CEIL(NVL(SUM(c.CONSUME_PRICE),0)/(SELECT COUNT(m.MEMBER_ID) FROM MEMBER m WHERE #{VALUE} <![CDATA[<=]]> m.AGE AND m.AGE <![CDATA[<=]]> #{VALUE}+9 )) "SUM"
		FROM CONSUME c RIGHT JOIN LARGE_CATEGORY lc ON (lc.LARGE_CATEGORY_ID = c.LARGE_CATEGORY_ID)
		AND c.MEMBER_ID IN ( SELECT m.MEMBER_ID FROM MEMBER m WHERE #{VALUE} <![CDATA[<=]]> m.AGE AND m.AGE <![CDATA[<=]]> #{VALUE}+9 )
		GROUP BY lc.LARGE_CATEGORY_NAME
	</select>
	
	<!-- 아이디별 전체 소비 분석 결과 가지고 오기 -->
	<select id="AnalyseLC_DESC" parameterType="string" resultMap="AnalysisDesc">
		SELECT lc.LARGE_CATEGORY_NAME "LCNAME", sc.SMALL_CATEGORY_NAME "SCNAME", c.CONSUME_PRICE "PRICE" , to_char(c.CONSUME_DATE,'mmdd') "DATE"
		FROM LARGE_CATEGORY lc LEFT JOIN CONSUME c ON (lc.LARGE_CATEGORY_ID = c.LARGE_CATEGORY_ID), SMALL_CATEGORY sc
		WHERE sc.SMALL_CATEGORY_ID = c.SMALL_CATEGORY_ID 
		AND MEMBER_ID = #{VALUE}
		ORDER BY "DATE"
	</select>
	
	<!-- 해당 연령별 가지고 오기  -->
	<select id="AnalyseLC_DESC_AVG" parameterType="int" resultMap="AnalysisDate">
		SELECT to_char(c.CONSUME_DATE,'mmdd') "DATE" , CEIL(SUM(c.CONSUME_PRICE)/ (SELECT COUNT(m.MEMBER_ID) FROM MEMBER m WHERE #{VALUE} <![CDATA[<=]]> m.AGE AND m.AGE <![CDATA[<=]]> #{VALUE}+9)) "MONEY"
		FROM CONSUME c 
		WHERE c.MEMBER_ID IN ( SELECT m.MEMBER_ID FROM MEMBER m WHERE #{VALUE} <![CDATA[<=]]> m.AGE AND m.AGE <![CDATA[<=]]> #{VALUE}+9 )
		GROUP BY c.CONSUME_DATE
		ORDER BY c.CONSUME_DATE
	</select>
	
	<!-- 해당 ID 요일별 정보 -->
	<select id="Analyse_DAY" parameterType="string" resultMap="AnalysisDay" >
		SELECT to_char(c.CONSUME_DATE,'day') "DAY", SUM(c.CONSUME_PRICE) "SUM"
		FROM CONSUME c 
		WHERE MEMBER_ID = #{VALUE}
		GROUP BY to_char(c.CONSUME_DATE,'day')
	</select>
	
	<!-- 대분륲 이미지 파일 들고오기  -->
	<select id="LargeCategroyList" resultType="LargeCategory" >
		SELECT LARGE_CATEGORY_ID "LargeCategoryId", LARGE_CATEGORY_NAME "LargeCategoryName", LARGE_CATEGORY_IMAGE "LargeCategoryImage"
		FROM LARGE_CATEGORY
	</select>
	
</mapper>